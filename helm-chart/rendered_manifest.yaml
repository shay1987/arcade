---
# Source: arcade/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-arcade-release-mysql-pass # Use Release.Name for unique naming
type: Opaque
data:
  # The password is taken from values.yaml and base64 encoded
  password: YWRtaW4=
---
# Source: arcade/templates/mysql.yaml
# ConfigMap for environment variables and initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-arcade-release-mysql-config
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS mydb;
    USE mydb;
    CREATE TABLE accounts (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(50) UNIQUE NOT NULL,
      password VARCHAR(255) NOT NULL,
      email VARCHAR(100) UNIQUE NOT NULL
    );
    -- Insert a default user for testing purposes
    INSERT INTO accounts (username, password, email) VALUES ('testuser', 'testpassword', 'test@example.com');
  MYSQL_ROOT_USER: "root"
  # Refer to the dynamically named MySQL service for internal cluster communication
  MYSQL_ROOT_HOST: "my-arcade-release-mysql-service.default.svc.cluster.local"
  MYSQL_ROOT_PORT: "3306"
  MYSQL_ROOT_DB: "mydb"
  FLASK_APP_PORT: "5000"
  FLASK_APP: "app.py" # Static value
---
# Source: arcade/templates/mysql.yaml
# helm-chart/arcade/templates/mysql.yaml

# Persistent Volume Claim for MySQL data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-arcade-release-mysql-pvc
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: arcade/templates/deployment.yaml
# helm-chart/arcade/templates/arcade-service.yaml
# (You might want to rename the generic service.yaml to arcade-service.yaml
# for clarity if you still have a single service.yaml)
apiVersion: v1
kind: Service
metadata:
  name: my-arcade-release-arcade-service # Templated name
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arcade # Component label
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/component: arcade # Match component label
  ports:
    - protocol: TCP
      port: 5000       # Service listens on 5000 (as login.py expects)
      targetPort: 7681 # Target the actual container port (7681)
---
# Source: arcade/templates/login.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-arcade-release-login-svc
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: login # Added component label
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/component: login # Match component label
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
# Source: arcade/templates/mysql.yaml
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: my-arcade-release-mysql-service
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/component: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP # Allow service type to be configurable
---
# Source: arcade/templates/deployment.yaml
# helm-chart/arcade/templates/arcade-deployment.yaml
# (You might want to rename the generic deployment.yaml to arcade-deployment.yaml
# for clarity if you still have a single deployment.yaml)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-arcade-release-arcade-app # Templated name
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arcade # Component label
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-arcade-release
      app.kubernetes.io/component: arcade # Match component label
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-arcade-release
        app.kubernetes.io/component: arcade # Set component label on pod
    spec:
      containers:
        - name: arcade
          image: "shay1987/arcade:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 7681 # Use targetPort from values
          # Explicitly set entrypoint and command for ttyd to ensure interactive shell
          entrypoint: ["ttyd"]
          command: ["-p", "7681", "bash", "-c", "TERM=xterm bash ./run.sh"]
---
# Source: arcade/templates/login.yaml
# helm-chart/arcade/templates/login.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-arcade-release-login-app
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: login # Added component label
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-arcade-release
      app.kubernetes.io/component: login # Match component label
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-arcade-release
        app.kubernetes.io/component: login # Set component label on pod
    spec:
      containers:
        - name: login
          image: "shay1987/login:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
          # Flask_App is a static filename
          - name: FLASK_APP
            value: "app.py"
          # MySQL connection details from the ConfigMap, which is also templated
          - name: MYSQL_ROOT_USER
            valueFrom:
              configMapKeyRef:
                name: my-arcade-release-mysql-config # Referencing the templated ConfigMap name
                key: MYSQL_ROOT_USER
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-arcade-release-mysql-pass # Referencing the templated Secret name
                key: password
          - name: MYSQL_ROOT_HOST
            valueFrom:
              configMapKeyRef:
                name: my-arcade-release-mysql-config # Referencing the templated ConfigMap name
                key: MYSQL_ROOT_HOST
          - name: MYSQL_ROOT_PORT
            valueFrom:
              configMapKeyRef:
                name: my-arcade-release-mysql-config # Referencing the templated ConfigMap name
                key: MYSQL_ROOT_PORT
          - name: MYSQL_ROOT_DB
            valueFrom:
              configMapKeyRef:
                name: my-arcade-release-mysql-config # Referencing the templated ConfigMap name
                key: MYSQL_ROOT_DB
---
# Source: arcade/templates/mysql.yaml
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-arcade-release-mysql
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-arcade-release # Selector should match pod labels
      app.kubernetes.io/component: mysql # Add a component label for fine-grained selection
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-arcade-release
        app.kubernetes.io/component: mysql
    spec:
      containers:
      - name: mysql
        image: "mysql:latest"
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-arcade-release-mysql-pass # References the Secret defined in secret.yaml
              key: password
        - name: MYSQL_DATABASE
          value: "mydb"
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: my-arcade-release-mysql-pvc
      - name: mysql-initdb
        configMap:
          name: my-arcade-release-mysql-config # References the ConfigMap defined above
---
# Source: arcade/templates/arcade-ingress.yaml
# helm-chart/arcade/templates/arcade-ingress.yamlapiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-arcade-release-arcade-ingress
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    # Nginx-specific annotations for rewrite and WebSocket
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/websocket-services: "my-arcade-release-arcade-service" # Templated service name
spec:
  ingressClassName: nginx
  rules: # Only create host-specific rule if host is defined
    - host: "chart-example.local"
      http:
        paths: # Only render arcade path for this Ingress
          - path: /arcade(/|$)(.*) # This path will capture everything after /arcade
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-arcade-release-arcade-svc # Reference templated service name
                port:
                  number: 5000
    # Block for IP-based access (without a specific hostname)
    - http:
        paths:
          # Assuming you only want /arcade for IP-based access in this Ingress
          - path: /arcade(/|$)(.*) # This path will capture everything after /arcade
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-arcade-release-arcade-svc
                port:
                  number: 5000
---
# Source: arcade/templates/login-static-ingress.yaml
# helm-chart/arcade/templates/login-static-ingress.yamlapiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-arcade-release-login-static-ingress
  labels:
    app.kubernetes.io/name: arcade
    helm.sh/chart: arcade-0.1.0
    app.kubernetes.io/instance: my-arcade-release
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
    # Rule for the root path and static files, using the templated login service name
    - http:
        paths:
          - path: /static/
            pathType: Prefix
            backend:
              service:
                name: my-arcade-release-login-svc # Reference templated login service
                port:
                  number: 5000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-arcade-release-login-svc # Reference templated login service
                port:
                  number: 5000
